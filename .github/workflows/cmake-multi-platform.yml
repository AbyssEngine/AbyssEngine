# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
    push:
        branches: [ "main" ]
    pull_request:
        branches: [ "main" ]

jobs:
    build:
        runs-on: ${{ matrix.os }}

        strategy:
            # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
            fail-fast: false

            # Set up a matrix to run the following 3 configurations:
            # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
            # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
            # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
            #
            # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
            matrix:
                os: [ ubuntu-latest, windows-latest, macos-latest ]
                build_type: [ Release ]
                c_compiler: [ gcc, clang, cl ]
                include:
                    -   os: windows-latest
                        c_compiler: cl
                        cpp_compiler: cl
                    -   os: ubuntu-latest
                        c_compiler: gcc
                        cpp_compiler: g++
                    -   os: ubuntu-latest
                        c_compiler: clang
                        cpp_compiler: clang++
                    -   os: macos-latest
                        c_compiler: clang
                        cpp_compiler: clang++
                exclude:
                    -   os: windows-latest
                        c_compiler: gcc
                    -   os: windows-latest
                        c_compiler: clang
                    -   os: ubuntu-latest
                        c_compiler: cl
                    -   os: macos-latest
                        c_compiler: cl
                    -   os: macos-latest
                        c_compiler: gcc
        steps:
            -   uses: actions/checkout@v3
                with:
                    submodules: recursive

            -   name: Set reusable strings
                # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
                id: strings
                shell: bash
                run: |
                    echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

            -   uses: lukka/get-cmake@latest
            -   name: Setup anew (or from cache) vcpkg (and does not build any package)
                uses: lukka/run-vcpkg@v11

            -   name: Run CMake consuming CMakePreset.json and run vcpkg to build packages
                uses: lukka/run-cmake@v10
                with:
                    configurePreset: 'ninja-multi-vcpkg'
                    configurePresetAdditionalArgs: "['-DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}','-DCMAKE_C_COMPILER=${{ matrix.c_compiler }}','-DCMAKE_BUILD_TYPE=${{ matrix.build_type }}', '-B ${{ steps.strings.outputs.build-output-dir }}', '-S ${{ github.workspace }}']"
                    buildPreset: 'ninja-multi-vcpkg'
                    buildPresetAdditionalArgs: "['--config Release']"

            -   name: Build
                # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
                run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

        env:
            VCPKG_DEFAULT_TRIPLET: ${{ matrix.triplet }}
            VCPKG_DEFAULT_HOST_TRIPLET: ${{ matrix.triplet }}

